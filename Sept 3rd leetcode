class Solution {
public:
    int solve(int i , int j , vector<vector<int>> &dp){
        if(i==0 && j== 0){
            return 1;
        }
        if(i<0 || j < 0){
            return 0;
        }
        else if(dp[i][j]!=-1){
            return dp[i][j];
        }

        return dp[i][j] = solve(i-1 , j , dp) + solve(i , j-1 , dp);
    }
    int solveTab(int m , int n){
        

        vector<int>curr (n , 0);
        vector<int>prev (n , 0);

        for(int i = 0 ; i< n ; i++){
            prev[i] = 1;
        }
        curr[0]=1;
     
        for(int i =1 ; i <=m-1 ; i++){
            for(int j = 1 ; j<=n-1 ; j++){
                

                curr[j] = prev[j] + curr[j-1];

            }
            prev=curr;
        }
        return prev[n-1];
    }
    int uniquePaths(int m, int n) {
        // vector<vector<int>> dp(m ,vector<int>(n , -1));
        // return solve(m-1 , n-1  , dp);

        return solveTab(m , n);
        
    }
};
