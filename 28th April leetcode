class Solution {
public:
    int numSimilarGroups(vector<string>& strs) {
        unordered_set<string> visited;  // to keep track of visited strings
        int groups = 0;  // to keep track of the number of groups
        
        for (const auto& str : strs) {
            if (visited.count(str) > 0) {  // skip if the string has already been visited
                continue;
            }
            
            dfs(str, visited, strs);  // explore the group of similar strings
            
            groups++;  // increment the number of groups
        }
        
        return groups;
    }
    
private:
    void dfs(const string& str, unordered_set<string>& visited, const vector<string>& strs) {
        visited.insert(str);  // mark the current string as visited
        
        for (const auto& s : strs) {
            if (visited.count(s) > 0) {  // skip if the string has already been visited
                continue;
            }
            
            if (isSimilar(str, s)) {  // if the two strings are similar, explore the group
                dfs(s, visited, strs);
            }
        }
    }
    
    bool isSimilar(const string& str1, const string& str2) {
        if (str1.size() != str2.size()) {  // if the strings have different lengths, they are not similar
            return false;
        }
        
        int diff = 0;
        for (int i = 0; i < str1.size(); i++) {
            if (str1[i] != str2[i]) {
                diff++;
                if (diff > 2) {  // if more than two characters are different, the strings are not similar
                    return false;
                }
            }
        }
        
        return true;  // if the strings have at most two different characters, they are similar
    }
};
