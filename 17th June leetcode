class Solution {
public:
    vector<int> a1,a2;
    int n,m;
    map<pair<int,int>,int> dp;
    int rec(int idx1,int idx2,int prev){
            // cout<<prev<<" "<<idx1<<" "<<idx2<<endl;
        if(dp.find({idx1,prev})!=dp.end()){
            return dp[{idx1,prev}];
        }
        if(idx1==n){
            return 0;
        }
        if(idx2==m){
            int ans=0;
            if(prev>=a1[idx1]){
                ans = 1e9;
            }
            for(int i=idx1;i<n-1;i++){
                if(a1[i]>a1[i+1]){
                    ans = 1e9;
                    break;
                }
            }
            // ans = 0;
            return dp[{idx1,prev}] = ans;
        }
        int ans = 1e9;
        if(a1[idx1]>prev){
            ans = rec(idx1+1,idx2,a1[idx1]);
        }
        if(a2[idx2]>prev)
        ans = min(ans,1+rec(idx1+1,idx2+1,a2[idx2]));
        if(a2[idx2]<=prev){
        ans = min(ans,rec(idx1,idx2+1,prev));
        }
        return dp[{idx1,prev}] = ans;
    }
    int makeArrayIncreasing(vector<int>& arr1, vector<int>& arr2) {
        a1 = arr1;
        set<int> st;
        // memset(dp,-1,sizeof(dp));
        dp.clear();
        for(auto it:arr2){
            st.insert(it);
        }
        for(auto it:st){
            a2.push_back(it);
            // cout<<it<<" ";
        }
        n = a1.size(),m=a2.size();
        int ans = rec(0,0,-1);
        ans = ans== 1e9 ? -1 : ans;
        return ans;
    }
};
