// User function Template for C++
class Solution {
  private:
     void dfs(int i,stack<int> &s,int visi[],vector<pair<int,int>> adj[]){
         visi[i]=1;
         for(auto it:adj[i]){
             int x=it.first;
             if(!visi[x])dfs(x,s,visi,adj);
         }
         s.push(i);
     }
  public:
     vector<int> shortestPath(int N,int M, vector<vector<int>>& edges){
        // code here
        vector<pair<int,int>> adj[N];
        stack<int> s;
        int visi[N]={0};
        for(int i=0;i<M;i++){
            int u=edges[i][0];
            int v=edges[i][1];
            int w=edges[i][2];
            adj[u].push_back({v,w});
        }
        
        for(int i=0;i<N;i++){
            if(!visi[i]){
                dfs(i,s,visi,adj);
            }
        }
        
        vector<int> dist(N,1e9);
        dist[0]=0;
        while(!s.empty()){
            int node=s.top();
            s.pop();
            for(auto it:adj[node]){
                int v=it.first;
                int w=it.second;
                if(dist[node]+w<dist[v]){
                    dist[v]=dist[node]+w;
                }
            }
        }
        for(int i=0;i<N;i++){
            if(dist[i]==1e9)dist[i]=-1;
        }
        return dist;
        
    }
};
