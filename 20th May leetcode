class Solution {
    double dfs(unordered_map<string, unordered_map<string, double>>& adjMatrix, string start, string& end, unordered_map<string, bool>& visited){
        if (start == end){
            return 1.0;
        }
        visited[start] = true;
        double ans = -1.0;
        for(auto& [k, v]: adjMatrix[start]){
            if (visited[k]){
                continue;
            }
            double posAns = dfs(adjMatrix, k, end, visited);
            if (posAns != -1.0){
                visited[start] = false;
                return posAns*v;
            }
        }
        visited[start] = false;
        return ans;
    }
public:
    vector<double> calcEquation(vector<vector<string>>& equations, vector<double>& values, vector<vector<string>>& queries) {
        unordered_map<string, unordered_map<string, double>> adjMatrix;
        unordered_map<string, bool> visited;
        for(int i = 0;i<equations.size(); i++){
            adjMatrix[equations[i][0]][equations[i][1]] = values[i];
            adjMatrix[equations[i][1]][equations[i][0]] = 1/values[i];
            visited[equations[i][0]] = false;
            visited[equations[i][1]] = false;
        }
        vector<double> ans;
        for(auto& q: queries){
            if (adjMatrix.find(q[0]) == adjMatrix.end() || adjMatrix.find(q[1]) == adjMatrix.end()){
                ans.push_back(-1.0);
            }else{
                double posAns = dfs(adjMatrix, q[0], q[1], visited);
                if (posAns != -1.0){
                    adjMatrix[q[0]][q[1]] = posAns;
                    adjMatrix[q[1]][q[0]] = 1/posAns;
                }
                ans.push_back(posAns);
            }
        }
        return ans;
    }
};
