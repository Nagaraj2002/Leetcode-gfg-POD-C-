//dsu implementation
class DSU{
public:
    vector<int> parent,rank;
    int comp; //noOfComponent
    DSU(int n){
        parent = vector<int>(n,-1);
        rank = vector<int>(n,1);
        comp = n;
    }
    int find(int x){
        if(parent[x]==-1) return x;
        return parent[x]=find(parent[x]);
    }
    bool unite(int x,int y){
        int p1 = find(x);
        int p2 = find(y);
        if(p1 == p2) return false; // this edge is avoidable
        int r1 = rank[p1];
        int r2 = rank[p2];
        if(r1<r2){
            parent[p1]=p2;
            rank[p2]+=r1;
        }else{
            parent[p2]=p1;
            rank[p2]+=r2;
        }
        comp--;
        return true;
    }
};
class Solution {
public:
    int maxNumEdgesToRemove(int n, vector<vector<int>>& edges) {
        DSU alice(n),bob(n);
        //sort in dec order
        sort(edges.begin(),edges.end(),greater<vector<int>>());
        
        int ans = 0;
        for(auto edge:edges){
            int type = edge[0];
            int u = edge[1]-1;
            int v = edge[2]-1;
            if(type != 2){ //type = 1 or 3 then add to alice
                bool canAdd = alice.unite(u,v);
                if(!canAdd) ans++;
            }
            if(type != 1){ // type = 2 or 3 add to bob
                bool canAdd = bob.unite(u,v);
                if(!canAdd && type!=3) ans++; // it type = 3 not add ans as that edge would be removed by alice dsu
            }
        }
        if(alice.comp == 1 && bob.comp == 1)return ans;
        else return -1;
    }
};
