/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> neighbors;
    Node() {
        val = 0;
        neighbors = vector<Node*>();
    }
    Node(int _val) {
        val = _val;
        neighbors = vector<Node*>();
    }
    Node(int _val, vector<Node*> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
};
*/

class Solution {
public:
    map<Node*,Node*> mp;
    Node* func(Node* node){
        if(!node) return NULL;
        // mp[node];
        Node *r = new Node(node->val,{});
        // cout<<node -> val<<endl;
        mp[node] = r;
        for(auto it:node->neighbors){
            cout<<it->val<<" ";
            if(mp.find(it)!=mp.end()) {
                cout<<it->val<<" ";
                r->neighbors.push_back(mp[it]);
            }
            else {
            Node*t = func(it);
            cout<<t->val<<" ";
            r->neighbors.push_back(t);
            }
        }
        return r;
    }
    Node* cloneGraph(Node* node) {
        return func(node);
    }
};
