/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    uint64_t widthOfBinaryTree(TreeNode* root) {
        if (!root) {
            return 0;
        }
        uint64_t maxWidth = 1;
        vector<pair<TreeNode*, uint64_t>> v;
        v.push_back(make_pair(root, 0));
        uint64_t levelStart = 0;
        while (levelStart < v.size()) {
            uint64_t levelSize = v.size() - levelStart;
            uint64_t left = v[levelStart].second;
            uint64_t right = left;
            for (uint64_t i = 0; i < levelSize; i++) {
                TreeNode* node = v[levelStart + i].first;
                right = v[levelStart + i].second;
                if (node->left) {
                    v.push_back(make_pair(node->left, right * 2));
                }
                if (node->right) {
                    v.push_back(make_pair(node->right, right * 2 + 1));
                }
            }
            maxWidth = max(maxWidth, right - left + 1);
            levelStart += levelSize;
        }
        return maxWidth;
    }

};
