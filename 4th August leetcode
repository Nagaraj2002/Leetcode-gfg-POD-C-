class Solution {
    unordered_set<string> st;
    vector<int> dp;
public:
    bool wordBreak(string s, vector<string>& wordDict) {
        for(auto word:wordDict)
        {
            st.insert(word);
        }
        dp.resize(s.size()+1,-1);
        int n=s.size();
        dp[n]=1;
        for(int i=n-1;i>=0;i--)
        {
            string str="";
            bool ans=false;
            for(int ind=i;ind<s.size();ind++)
            {
                str+=s[ind];
                if(st.count(str))
                {
                    if(dp[ind+1])
                     {
                         ans=true;
                         break;
                     }
                }
            }
            dp[i]=ans;
        }
        return dp[0];

    }

        // bool helper(int i,string s, vector<string>& wordDict)
        // {
        //     if(i>=s.size())return true;
        //     if(dp[i]!=-1) return dp[i];
        //     string str="";
        //     bool ans=false;
        //     for(int ind=i;ind<s.size();ind++)
        //     {
        //         str+=s[ind];
        //         if(st.count(str))
        //         {
        //             if(helper(ind+1,s,wordDict))
        //              return true;
        //         }
        //     }
        //     return dp[i]=ans;

        // }
};
