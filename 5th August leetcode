class Solution {
public:
    map<pair<int,int>,vector<TreeNode*>> memo;
    vector<TreeNode*> allPossibleBST(int start,int end){
        vector<TreeNode*> res;

        if(start > end){
            res.push_back(nullptr);
            return res;
        }

        // if it's position is already exist
        if(memo.find(make_pair(start, end)) != memo.end()){
            return memo[make_pair(start, end)];
        }

        //make each as a root and try all possible tree
        for(int i = start;i<=end;i++){
            //each root contain left and right subtree
            vector<TreeNode*> leftSubTree  = allPossibleBST(start,i-1);
            vector<TreeNode*> rightSubTree  = allPossibleBST(i+1,end);

            for(TreeNode* left: leftSubTree){
                for(TreeNode* right: rightSubTree){
                    //create a new root
                    TreeNode* root = new TreeNode(i,left,right);
                    //push root treenode into result vector
                    res.push_back(root);
                }
            }
        }

        return memo[make_pair(start, end)] = res;
    }
    vector<TreeNode*> generateTrees(int n) {
        return allPossibleBST(1,n);
    }
};
