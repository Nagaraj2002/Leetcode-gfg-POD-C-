/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<TreeNode*> allPossibleFBT(int n) {
        vector<vector<TreeNode*>> dp(n+1);

        dp[1].push_back(new TreeNode(0));
        
        for (int i=3;i<=n;i+=2){
            // build from constituents
            int req_n = i-1; // take away root node

            for (int j=1;j<i;++j){
                int k = req_n - j;
      
                for (int a=0;a<dp[j].size();++a){
                    for (int b=0;b<dp[k].size();++b){
                        dp[i].push_back(new TreeNode(0));
                        dp[i].back()->left = dp[j][a];
                        dp[i].back()->right = dp[k][b];
                    }
                }
            }
        }

        return dp[n];
    }
};
