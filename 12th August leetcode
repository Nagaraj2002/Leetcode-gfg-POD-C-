class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int c=0;
vector<vector<int>>dp(obstacleGrid.size()+1,vector<int>(obstacleGrid[0].size()+1,-1));
        return findingpaths(obstacleGrid,0,0,c,dp);

    }
    int findingpaths(vector<vector<int>>&obstacleGrid,int i,int j,int c,
    vector<vector<int>>&dp)
    {
        if (i<0|| j<0 || i>=obstacleGrid.size()|| j>=obstacleGrid[0].size()||
        obstacleGrid[i][j]==1)
        {
            return 0;
        }
        if (i==obstacleGrid.size()-1 && j==obstacleGrid[0].size()-1)
        {
            c++;
            return c;
        }
        if (dp[i][j]!=-1)
            return dp[i][j];
dp[i][j]=findingpaths(obstacleGrid,i,j+1,c,dp)+findingpaths(obstacleGrid,i+1,j,c,dp);
    return dp[i][j];
    }
};
