/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int getMinimumDifference(TreeNode* root) {
        int minDiff = INT_MAX;  // Initialize the minimum difference to a large value
        int prevValue = -1;     // Keep track of the previous node's value
        inorderTraversal(root, prevValue, minDiff);  // Perform the inorder traversal
        return minDiff;  // Return the minimum difference found
    }
    
    // Helper function to perform in-order traversal
    void inorderTraversal(TreeNode* node, int& prevValue, int& minDiff) {
        if (node == nullptr)
            return;
        
        // Visit the left subtree
        inorderTraversal(node->left, prevValue, minDiff);
        
        // Update the minimum difference by comparing with the previous value
        if (prevValue != -1) {
            minDiff = min(minDiff, node->val - prevValue);
        }
            
        prevValue = node->val;  // Update the previous value
        
        // Visit the right subtree
        inorderTraversal(node->right, prevValue, minDiff);
    }
};
